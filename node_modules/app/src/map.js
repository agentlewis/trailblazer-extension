/** @jsx React.DOM */
var React = require('react');
var renderMap = require('app/render');
var d3ify = require('app/d3ify');
var d3 = require('d3');
require('d3-tip');
var tooltipView = require('app/tooltip-view');

module.exports = React.createClass({
  getInitialState: function () {
    return {
      updateable: false,
      force: null,
      init: false,
      listening: false
    };
  },

  render: function () {
    return  <svg
              id={this.props.id}
              width="100%"
              height="100%"
              preserveAspectRatio="xMidYMid meet"
              viewBox={"0 0 " + this.props.width + " " + this.props.height} >
              <g id="zoom">
                <g id="mapG">
                  <rect
                    className="overlay"
                    width={this.props.width}
                    height={this.props.height} >
                  </rect>
                </g>
              </g>
            </svg>;
  },

  componentDidMount: function () {
    console.log('map rendering', this.props);
    var data = this.props.data;
    var nodeObj = (data.nodeMap && data.nodeMap.toObject) ? data.nodeMap.toObject() : {};

    if (Object.keys(nodeObj).length > 0) {
     var options = {
        selector: this.props.selector,
        width: this.props.width,
        height: this.props.height
      };
      renderMap(d3ify(nodeObj), options, this);
      this.setState({ init: true })
    }    
  },

  registerForceListeners: function () {
    this.state.force.on('end', function () {
      this.setState({ updateable: true });
    }.bind(this));

    this.state.force.on('start', function () {
      this.setState({ updateable: false });
    }.bind(this));
    
    this.setState({ listening: true });
  },

  componentWillReceiveProps: function (nextProps) {
     console.log('componentDidUpdate', nextProps.data.nodeMap, this.props.data.nodeMap)
// else if (!newData) {
//     //map does exist, no new data
//       return;
//     } else if (updateable) {
//     //map does exist, new data, force graph stopped animating
//       nodeObj = (nextProps.data.nodeMap.toObj()) ? nextProps.data.nodeMap.toObj() : {};
//       data = d3ify(nodeObj);
//       //NOTE React or D3 doesn't allow selection of nodes directly through d3.selectAll('.node')
//       // for some reason
//       var map = d3.select('#mapG') 

//       map .selectAll('.node')
//           .data(data.nodes, function(d) { return d.id })
//           .classed('open', function(d) { return d.tabId }); 

//     }

  }, 

  componentDidUpdate: function () {
    console.log('componentDidUpdate', nextProps.data.nodeMap, this.props.data.nodeMap)
    //booleans
    var map        = this.state.init
     ,  force      = this.state.force
     ,  listening  = this.state.listening;

    console.log(map, typeof force !== 'undefined', listening)

    if (force && !listening) {
      this.registerForceListeners();
    }

    var nodeObj;
    var options = {
      selector: nextProps.selector,
      width: nextProps.width,
      height: nextProps.height
    };

    if (!map) {
      //map doesn't exist, render from existing props
      //TODO check if nextProps data is new and use that?
      var data = this.props.data;
      nodeObj = (data.nodeMap.toJS) ? data.nodeMap.toJS() : {};
      console.log('nodeObj', nodeObj)
      if (Object.keys(nodeObj).length > 0) {
        //render map injects force into component state.
        renderMap(d3ify(nodeObj), options, this);
        this.setState({ init: true })        
      }
    } 
  }

  // componentDidUpdate: function (prevProps) {
  //   console.log('map - componentDidUpdate', this.state, this.props)

  //   var nodeObj = (this.props.data.nodeMap.toObj()) ? this.props.data.nodeMap.toObj() : {};

  //   //init map
  //   if (!this.state.init && Object.keys(this.props.data.nodes).length > 0) {
  //     var data = this.props.data
  //      ,  options = {
  //           selector: this.props.selector,
  //           width: this.props.width,
  //           height: this.props.height
  //         };

  //     console.log('initingg', data, options)
  //     renderMap(d3ify(nodes), options, this);
  //     this.setState({init: true});
  //   }

  //   //render injects force onto map component
  //   if (this.state.force && !this.state.updateable ) {
  //     this.registerForceListeners();
  //   };

  //   //once force has ended animation map becomes updateable
  //   //TODO live update new nodes
  //   if (this.state.updateable && this.state.init) {
  //     var data = d3ify(this.props.data);
  //     //NOTE React or D3 doesn't allow selection of nodes directly through d3.selectAll('.node')
  //     // for some reason
  //     var map = d3.select('#mapG') 

  //     map .selectAll('.node')
  //         .data(data.nodes, function(d) { return d.id })
  //         .classed('open', function(d) { return d.tabId });   
  //   };
  // }
})
