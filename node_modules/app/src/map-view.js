/** @jsx React.DOM */
var React = require('react');

//components
var MapTitle = require('app/components/map-title');
var Map = require('app/components/map');
var ShareMap = require('app/components/share-map');

module.exports = React.createClass({
  getInitialState: function () {
    return {
      sharePopoverState: false
    }
  },

  render: function () {
    var feedbackText = "Feedback |"
     ,  state = this.props.state
     ,  id = state.assignmentId
     ,  assignment = state.AssignmentState.assignments[id]
     ,  shareText = assignment.visible ? "Shared" : "Share"
     ,  data = {
          nodes: state.nodeState.nodes,
          assignment: assignment
        };

    console.log('assignment in map-view', data, state)

    return  <div onClick={this.handleClick}>
              <MapTitle title={assignment.title} id={id} />
              <div id="map-container" >
                <Map id="map" width={960} height={500} selector="#map" data={data} />
              </div>
              <span className="help" >
                <a
                  className="feedback"
                  href="mailto:hello@trailblazer.io?subject=Trailblazer In-App Feedback"
                  title="Problem? Let us know." 
                  target="_blank" >
                  {feedbackText}
                </a>
                <a 
                  className="tutorial" 
                  href="http://youtu.be/u1auxOODJ88" 
                  title="How do I use Trailblazer?" 
                  target="_blank" >
                  <svg 
                    width="16px" 
                    height="16px" 
                    viewBox="0 0 16 16" 
                    version="1.1">
                    <g 
                      stroke="none" 
                      strokeWidth="1" 
                      fill="none" 
                      fillRule="evenodd" >
                      <path 
                        d="M8,16 C12.418278,16 16,12.418278 16,8 C16,3.581722 12.418278,0 8,0 C3.581722,0 0,3.581722 0,8 C0,12.418278 3.581722,16 8,16 Z M7.40362088,7.79955033 L7.60238037,9.40950225 L8.40735633,9.40950225 L8.50673608,8.60452629 C9.60985129,8.41570477 10.504269,7.8492402 10.504269,6.5871174 C10.504269,5.33493257 9.57009939,4.55977053 8.17878291,4.55977053 C7.10548163,4.55977053 6.36013352,5.0069794 5.78373098,5.66288574 L6.52907909,6.45792372 C7.00610188,5.95108701 7.52287657,5.67282371 8.14896899,5.67282371 C8.86450318,5.67282371 9.29183609,6.06040473 9.29183609,6.6268693 C9.29183609,7.29271361 8.71543355,7.70017058 7.45331075,7.74986045 L7.40362088,7.79955033 Z M8.64586773,11.6057947 L8.64586773,10.2442921 L7.3141791,10.2442921 L7.3141791,11.6057947 L8.64586773,11.6057947 Z" 
                        fill="#000000" >
                      </path>
                    </g>
                  </svg>
                </a>
                <ShareMap
                  assignmentId={id} 
                  visible={assignment.visible} 
                  mapURL={assignment.url} 
                  popover={this.state.sharePopoverState}
                  togglePopover={this.togglePopover.bind(this)} 
                  shareAction={this.props.shareAction} />
              </span>
            </div>;
  },

  componentWillRecieveProps: function (nextProps) {
    console.log('map-view componentWillRecieveProps', nextProps)
  },

  handleClick: function (evt) {
    var parent = evt.target.parentNode.id;
    var grandparent = evt.target.parentNode.parentNode.id

    //remove popover when clicking anywhere else
    if (this.state.sharePopoverState && ((parent || grandparent) !== 'share-popover')) {
      this.setState({sharePopoverState: false});
    };
  },

  togglePopover: function () {
    var bool = !this.state.sharePopoverState;
    this.setState({sharePopoverState: bool});
  }
});

